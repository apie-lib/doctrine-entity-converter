<?php
namespace Test\RenderOnly;

use Apie\Core\Dto\DtoInterface;
use Apie\DoctrineEntityConverter\Embeddables\MixedType;
use Apie\DoctrineEntityConverter\Utils\Utils;
use Apie\Fixtures\Entities\UserWithAddress as OriginalDomainObject;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity]
class apie_entity_example_user_with_address implements DtoInterface
{
    #[ORM\Column(type: 'integer', nullable: true)]
    #[ORM\Id]
    #[ORM\GeneratedValue(strategy: 'IDENTITY')]
    public ?int $id;

    #[ORM\Embedded(class: 'Apie\DoctrineEntityConverter\Embeddables\MixedType')]
    public MixedType $apie_address;

    public static function createFrom(OriginalDomainObject $input): self
    {
        $instance = new self();

        $tmp = $input->getId();
        $instance->id = $tmp ? $tmp->toNative() : null;
        $raw = Utils::getProperty($input, new \ReflectionProperty(\Apie\Fixtures\Entities\UserWithAutoincrementKey::class, 'address'));
        $converted = MixedType::createFrom($raw);
        $instance->apie_address = $converted;
        return $instance;
    }

    public function inject(OriginalDomainObject $instance): void
    {
        $tmp = $this->apie_address;
        $converted = $this->apie_address->toDomainObject();
        Utils::setProperty($instance, new \ReflectionProperty(\Apie\Fixtures\Entities\UserWithAutoincrementKey::class, 'address'), $converted);
    }
}
