<?php
namespace Test\RenderOnly;

use Apie\Core\Dto\DtoInterface;
use Apie\DoctrineEntityConverter\Embeddables\MixedType;
use Apie\DoctrineEntityConverter\Utils\Utils;
use Apie\Fixtures\Entities\UserWithAutoincrementKey as OriginalDomainObject;
use Doctrine\ORM\Mapping as ORM;

class UserWithAutoincrementKey implements DtoInterface
{
    #[ORM\Column(type: 'integer', nullable: true)]
    #[ORM\GeneratedValue]
    #[ORM\Id]
    public ?int $id;

    #[ORM\Embedded(class: 'Apie\DoctrineEntityConverter\Embeddables\MixedType')]
    public MixedType $password;

    #[ORM\Embedded(class: 'Apie\DoctrineEntityConverter\Embeddables\MixedType')]
    public MixedType $address;

    private function __construct()
    {
    }

    public static function createFrom(OriginalDomainObject $input): self
    {
        $instance = new self();

        $tmp = Utils::getValue($input, new \ReflectionProperty(OriginalDomainObject::class, 'id'));
        $instance->id = $tmp === null ? null : \Apie\Core\ValueObjects\Utils::toInt($tmp);
        $instance->password = MixedType::createFrom(Utils::getProperty($input, new \ReflectionProperty(OriginalDomainObject::class, 'password')));
        $instance->address = MixedType::createFrom(Utils::getProperty($input, new \ReflectionProperty(OriginalDomainObject::class, 'address')));
        return $instance;
    }

    public function inject(OriginalDomainObject $instance, \ReflectionProperty $property): void
    {
        $property->setAccessible(true);
        $property->setValue($instance, $this->id);
        Utils::setProperty($instance, new \ReflectionProperty(OriginalDomainObject::class, 'password'), $this->password->toDomainObject());
        Utils::setProperty($instance, new \ReflectionProperty(OriginalDomainObject::class, 'address'), $this->address->toDomainObject());
    }
}
